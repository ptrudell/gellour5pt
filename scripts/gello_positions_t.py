"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gello_positions_t(object):
    __slots__ = ["timestamp", "joint_positions", "gripper_position", "joint_velocities", "is_valid", "arm_side"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.timestamp = 0
        self.joint_positions = [ 0.0 for dim0 in range(6) ]
        self.gripper_position = 0.0
        self.joint_velocities = [ 0.0 for dim0 in range(6) ]
        self.is_valid = False
        self.arm_side = ""

    def encode(self):
        buf = BytesIO()
        buf.write(gello_positions_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>6d', *self.joint_positions[:6]))
        buf.write(struct.pack(">d", self.gripper_position))
        buf.write(struct.pack('>6d', *self.joint_velocities[:6]))
        buf.write(struct.pack('b', self.is_valid))
        __arm_side_encoded = self.arm_side.encode('utf-8')
        buf.write(struct.pack('>I', len(__arm_side_encoded)+1))
        buf.write(__arm_side_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gello_positions_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gello_positions_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gello_positions_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.joint_positions = struct.unpack('>6d', buf.read(48))
        self.gripper_position = struct.unpack(">d", buf.read(8))[0]
        self.joint_velocities = struct.unpack('>6d', buf.read(48))
        self.is_valid = bool(struct.unpack('b', buf.read(1))[0])
        __arm_side_len = struct.unpack('>I', buf.read(4))[0]
        self.arm_side = buf.read(__arm_side_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gello_positions_t in parents: return 0
        tmphash = (0xf9972dadfd98b942) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gello_positions_t._packed_fingerprint is None:
            gello_positions_t._packed_fingerprint = struct.pack(">Q", gello_positions_t._get_hash_recursive([]))
        return gello_positions_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

