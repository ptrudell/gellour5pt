"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_data_t(object):
    __slots__ = ["timestamp", "robot_id", "joint_angles", "temperature", "is_moving"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.timestamp = 0
        self.robot_id = ""
        self.joint_angles = [ 0.0 for dim0 in range(6) ]
        self.temperature = 0.0
        self.is_moving = False

    def encode(self):
        buf = BytesIO()
        buf.write(robot_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __robot_id_encoded = self.robot_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__robot_id_encoded)+1))
        buf.write(__robot_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>6d', *self.joint_angles[:6]))
        buf.write(struct.pack(">d", self.temperature))
        buf.write(struct.pack('b', self.is_moving))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_data_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __robot_id_len = struct.unpack('>I', buf.read(4))[0]
        self.robot_id = buf.read(__robot_id_len)[:-1].decode('utf-8', 'replace')
        self.joint_angles = struct.unpack('>6d', buf.read(48))
        self.temperature = struct.unpack(">d", buf.read(8))[0]
        self.is_moving = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_data_t in parents: return 0
        tmphash = (0x61e944e09a6b6e94) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_data_t._packed_fingerprint is None:
            robot_data_t._packed_fingerprint = struct.pack(">Q", robot_data_t._get_hash_recursive([]))
        return robot_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

